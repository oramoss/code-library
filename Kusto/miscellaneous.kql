https://docs.microsoft.com/en-us/azure/governance/resource-graph/samples/starter?tabs=azure-cli
https://docs.microsoft.com/en-us/azure/governance/resource-graph/samples/advanced?tabs=azure-cli#join-sql

// Total billable executions 
// Total billable executions by operation name. 
// resource_workflowName_s,
AzureDiagnostics
| where ResourceProvider == "MICROSOFT.LOGIC"
| where Category == "WorkflowRuntime" 
| where OperationName has "workflowTriggerStarted" or OperationName has "workflowActionStarted" 
| where TimeGenerated between (todatetime("2020-08-24 00:00:00.0") .. todatetime("2020-08-30 23:59:59.0"))
| summarize dcount(resource_runId_s) by OperationName, startofday(TimeGenerated)


// Get traffic across peered network via NSG Flow logs 
// Run from logs on one end of Peer searching for IP address prefix on other side of peer
AzureNetworkAnalytics_CL
| where SubType_s == 'FlowLog'
    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')
    and FlowStartTime_t between (datetime('2021-08-04T08:20:29.248Z')..datetime('2021-08-05T08:20:29.248Z'))
    and FlowType_s != 'ExternalPublic'
    and (SrcIP_s contains "172.16.158" or DestIP_s contains "172.16.158")
| sort by SrcIP_s,DestIP_s

// Client IPs accessing an App Service over a period of time. (For use in IP locking)
let start=datetime("2021-04-28T09:46:00.000Z");
let end=datetime("2021-09-28T10:46:00.000Z");
let timeGrain=1m;
let dataset=requests
    // additional filters can be applied here
    | where timestamp > start and timestamp < end
    | where client_Type != "Browser"
;
dataset
// change 'operation_Name' on the below line to segment by a different property
| summarize count_=sum(itemCount), avg(duration), percentiles(duration, 50, 95, 99) by client_IP
| order by count_ desc

// Resources count by Subscription
Resources
| join kind=leftouter (ResourceContainers | where type=='microsoft.resources/subscriptions' | project SubName=name, subscriptionId) on subscriptionId
| project SubName, type, name
| summarize count(type) by SubName

| where type == "microsoft.logic/workflows" 
| where SubName == "SportsDirect.com - Security" 

// Unallocated NSGs
Resources
| where type has "microsoft.network/networkinterfaces"
| where properties !has 'privateLinkConnectionProperties'
| where properties !has 'virtualmachine'
| project id, resourceGroup, location, subscriptionId

// Orphaned Disks
// Disks no longer attached to a VM
// Click the "Run query" command above to execute the query and see results.
Resources
| where type has "microsoft.compute/disks"
| extend diskState = tostring(properties.diskState)
| where (managedBy == "" and diskState != 'ActiveSAS') or diskState == 'Unattached'
| project id, diskState, resourceGroup, location, subscriptionId, managedBy

// Orphaned NICs
// NICs no longer attached to a VM
// Click the "Run query" command above to execute the query and see results.
Resources
| where type has "microsoft.network/networkinterfaces"
| where properties !has 'virtualmachine'
| where properties !has 'privateLinkConnectionProperties'
| project properties,id, resourceGroup, location, subscriptionId


// Find WAF error logs - searching for host/uri
// Usually to find the reason the WAF blocks the request...usually sql injection
AzureDiagnostics 
| where ResourceProvider == "MICROSOFT.NETWORK" and Category == "ApplicationGatewayFirewallLog"
| where hostname_s == "tnt-identity-test.rev-log.com"
| where requestUri_s contains "RegisterConfirmation"
| order by TimeGenerated desc 

// Find AFD error logs - searching for host/uri
AzureDiagnostics 
| where ResourceProvider == "MICROSOFT.CDN" 
| where Category == "FrontDoorAccessLog"
| where hostName_s == "dev-om.rev-log.com"
| where requestUri_s contains "p3/app"
| order by TimeGenerated desc 


// Summarize requests for Key vault artifcats within last 7d
let data = AzureDiagnostics 
    | where TimeGenerated > ago(7d)
    // Ignore Authentication operations with a 401. This is normal when using Key Vault SDK, first an unauthenticated request is done then the response is used for authentication.
    | where Category == "AuditEvent" and not (OperationName == "Authentication" and httpStatusCode_d == 401)
    | where OperationName in ('CertificateIssuersList', 'CertificateList', 'ListPrivateEndpointConnections', 'SecretGet', 'VaultGet', 'VaultPatch') or '*' in ('CertificateIssuersList', 'CertificateList', 'ListPrivateEndpointConnections', 'SecretGet', 'VaultGet', 'VaultPatch')
    | where requestUri_s  == "????"
    // Create ResultStatus with all the 'success' results bucked as 'Success'
    // Certain operations like StorageAccountAutoSyncKey have no ResultSignature, for now set to 'Success' as well
    | extend ResultStatus = case (
                                ResultSignature == "",
                                "Success",
                                ResultSignature == "OK",
                                "Success",
                                ResultSignature == "Accepted",
                                "Success",
                                ResultSignature
                            )
    | where ResultStatus == 'All' or 'All' == 'All';
data
| summarize count() by identity_claim_xms_mirid_s

// Log breakdown by Solution/DataType
Usage
| where TimeGenerated > startofday(ago(90d))
| where IsBillable == true
| where Solution == "LogManagement"
| where DataType == "AzureDiagnostics"
| summarize IngestedGB = sum(Quantity) / 1000 by Type
| sort by IngestedGB desc

Usage
| where TimeGenerated > startofday(ago(90d))
| where IsBillable == true
| where Solution == "LogManagement"
| where DataType == "AzureDiagnostics"

//Compare Log Analytics Agent to AMA to ensure it is working after switch to AMA
Heartbeat
| distinct Computer, SourceComputerId, Category
| join kind=inner (
    Event
| extend d=parse_xml(EventData)
    | extend sourceHealthServiceId = tostring(d.DataItem.["@sourceHealthServiceId"])
    | project-reorder TimeGenerated, Computer, EventID, sourceHealthServiceId, ParameterXml, EventData
    ) on $left.SourceComputerId==$right.sourceHealthServiceId
| project TimeGenerated, Computer, Category, EventID, sourceHealthServiceId, ParameterXml, EventData

// Find VMs that user a specific Image
resources
| where type == "microsoft.compute/virtualmachines"
| where properties['virtualMachineProfile']['storageProfile']['imageReference']['id'] contains "2019StdImg"

// Find VMSSs that user a specific Image
resources
| where type == "microsoft.compute/virtualmachinescalesets"
| where properties['virtualMachineProfile']['storageProfile']['imageReference']['id'] contains "2019StdImg"

