AzureDiagnostics
| where Category == "AZFWNetworkRule"
//| where OperationName == "AzureFirewallNatRuleLog" or OperationName == "AzureFirewallNetworkRuleLog"
//case 1: for records that look like this:
//PROTO request from IP:PORT to IP:PORT.
| parse msg_s with Protocol " request from " SourceIP ":" SourcePortInt:int " to " TargetIP ":" TargetPortInt:int *
//case 1a: for regular network rules
| parse kind=regex flags=U msg_s with * ". Action\\: " Action1a "\\."
//case 1b: for NAT rules
//TCP request from IP:PORT to IP:PORT was DNAT'ed to IP:PORT
| parse msg_s with * " was " Action1b:string " to " TranslatedDestination:string ":" TranslatedPort:int *
//Parse rule data if present
| parse msg_s with * ". Policy: " Policy ". Rule Collection Group: " RuleCollectionGroup "." *
| parse msg_s with * " Rule Collection: "  RuleCollection ". Rule: " Rule 
//case 2: for ICMP records
//ICMP request from 10.0.2.4 to 10.0.3.4. Action: Allow
| parse msg_s with Protocol2 " request from " SourceIP2 " to " TargetIP2 ". Action: " Action2
| extend
SourcePort = tostring(SourcePortInt),
TargetPort = tostring(TargetPortInt)
| extend 
    Action = case(Action1a == "", case(Action1b == "",Action2,Action1b), split(Action1a,".")[0]),
    Protocol = case(Protocol == "", Protocol2, Protocol),
    SourceIP = case(SourceIP == "", SourceIP2, SourceIP),
    TargetIP = case(TargetIP == "", TargetIP2, TargetIP),
    //ICMP records don't have port information
    SourcePort = case(SourcePort == "", "N/A", SourcePort),
    TargetPort = case(TargetPort == "", "N/A", TargetPort),
    //Regular network rules don't have a DNAT destination
    TranslatedDestination = case(TranslatedDestination == "", "N/A", TranslatedDestination), 
    TranslatedPort = case(isnull(TranslatedPort), "N/A", tostring(TranslatedPort)),
    //Rule information
    Policy = case(Policy == "", "N/A", Policy),
    RuleCollectionGroup = case(RuleCollectionGroup == "", "N/A", RuleCollectionGroup ),
    RuleCollection = case(RuleCollection == "", "N/A", RuleCollection ),
    Rule = case(Rule == "", "N/A", Rule)
| project TimeGenerated, msg_s, Protocol, SourceIP,SourcePort,TargetIP,TargetPort,Action, TranslatedDestination, TranslatedPort, Policy, RuleCollectionGroup, RuleCollection, Rule
//| where TargetIP == "10.240.97.13"

AzureDiagnostics
| where Category == "AZFWApplicationRule"

//Network Flow Logs
// https://www.cloudcorner.gr/microsoft/nsg-flow-logs-review-in-log-analytics/
AzureNetworkAnalytics_CL
| extend NSGRuleAction=split(NSGRules_s,'|',3)[0]
| extend NSGRuleName=tostring(split(NSGRules_s,'|',1)[0])
| extend NSGName=tostring(split(NSGList_s,'/',2)[0])
| where NSGName  == "labdc-nsg"
| where SrcIP_s == "192.168.200.5"
| summarize count() by SourcePubIPs=SrcPublicIPs_s, SourceIP=SrcIP_s, DestPublicIPs=DestPublicIPs_s, DestinationPort=DestPort_d, TimeGenerated, NSGName, NSGRuleName, SourceSubnet=Subnet1_s, DestinationSubnet=Subnet2_s


https://docs.microsoft.com/en-us/azure/governance/resource-graph/samples/starter?tabs=azure-cli
https://docs.microsoft.com/en-us/azure/governance/resource-graph/samples/advanced?tabs=azure-cli#join-sql

// Find use of a Key in a KV
AzureDiagnostics 
| where OperationName == "KeyGet"
| summarize count() by identity_claim_upn_s

// Find VMSS with expiring images
resources 
|where type == "microsoft.compute/virtualmachinescalesets" 
| where properties.virtualMachineProfile.storageProfile.imageReference.publisher =~ 'MicrosoftWindowsServer' //optional filter, uncomment this line to filter for a specific publisher.
| where properties.virtualMachineProfile.storageProfile.imageReference.sku =~ '2022-datacenter-azure-edition' //optional filter, uncomment this line to filter for a specific deprecated SKU (Plan).
//| where properties.storageProfile.imageReference.version == '20348.1487.230106' //optional filter, uncomment this line to filter for a specific deprecated version.
|project name, subscriptionId, resourceGroup, ImagePublisher=properties.storageProfile.imageReference.publisher,ImageOffer=properties.storageProfile.imageReference.offer,imageSku=properties.storageProfile.imageReference.sku, imageVersion=properties.storageProfile.imageReference.exactVersion

// Find VM with expiring images
resources 
|where type == "microsoft.compute/virtualmachines" 
| where properties.virtualMachineProfile.storageProfile.imageReference.publisher =~ 'MicrosoftWindowsServer' //optional filter, uncomment this line to filter for a specific publisher.
| where properties.virtualMachineProfile.storageProfile.imageReference.sku =~ '2022-datacenter-azure-edition' //optional filter, uncomment this line to filter for a specific deprecated SKU (Plan).
//| where properties.storageProfile.imageReference.version == '20348.1487.230106' //optional filter, uncomment this line to filter for a specific deprecated version.
|project name, subscriptionId, resourceGroup, ImagePublisher=properties.storageProfile.imageReference.publisher,ImageOffer=properties.storageProfile.imageReference.offer,imageSku=properties.storageProfile.imageReference.sku, imageVersion=properties.storageProfile.imageReference.exactVersion

// Find storage file logs by protocol...
StorageFileLogs
| where Protocol == "NFS"
| summarize count=count() by Protocol

// Find storage accounts with most blob accesses...
StorageBlobLogs
| summarize Count = count() by _ResourceId
| order by Count desc nulls first 

// Show storage account accesses by authN type for access key usage
StorageBlobLogs
| where AuthenticationType == "AccountKey" or AuthenticationType == "SAS"
| where TimeGenerated > ago(3d)
| summarize Count=count() by AccountName,AuthenticationType
| order by AccountName,AuthenticationType

// Storage Blob logs for access key usage
StorageBlobLogs
| where AuthenticationType == "AccountKey" or AuthenticationType == "SAS"
| where TimeGenerated > ago(3d)

// Total billable executions 
// Total billable executions by operation name. 
// resource_workflowName_s,
AzureDiagnostics
| where ResourceProvider == "MICROSOFT.LOGIC"
| where Category == "WorkflowRuntime" 
| where OperationName has "workflowTriggerStarted" or OperationName has "workflowActionStarted" 
| where TimeGenerated between (todatetime("2020-08-24 00:00:00.0") .. todatetime("2020-08-30 23:59:59.0"))
| summarize dcount(resource_runId_s) by OperationName, startofday(TimeGenerated)


// Get traffic across peered network via NSG Flow logs 
// Run from logs on one end of Peer searching for IP address prefix on other side of peer
AzureNetworkAnalytics_CL
| where SubType_s == 'FlowLog'
    and (FASchemaVersion_s == '1' or FASchemaVersion_s == '2')
    and FlowStartTime_t between (datetime('2021-08-04T08:20:29.248Z')..datetime('2021-08-05T08:20:29.248Z'))
    and FlowType_s != 'ExternalPublic'
    and (SrcIP_s contains "172.16.158" or DestIP_s contains "172.16.158")
| sort by SrcIP_s,DestIP_s

// Client IPs accessing an App Service over a period of time. (For use in IP locking)
let start=datetime("2021-04-28T09:46:00.000Z");
let end=datetime("2021-09-28T10:46:00.000Z");
let timeGrain=1m;
let dataset=requests
    // additional filters can be applied here
    | where timestamp > start and timestamp < end
    | where client_Type != "Browser"
;
dataset
// change 'operation_Name' on the below line to segment by a different property
| summarize count_=sum(itemCount), avg(duration), percentiles(duration, 50, 95, 99) by client_IP
| order by count_ desc

// Resources count by Subscription
Resources
| join kind=leftouter (ResourceContainers | where type=='microsoft.resources/subscriptions' | project SubName=name, subscriptionId) on subscriptionId
| project SubName, type, name
| summarize count(type) by SubName

| where type == "microsoft.logic/workflows" 
| where SubName == "SportsDirect.com - Security" 

// Unallocated NSGs
Resources
| where type has "microsoft.network/networkinterfaces"
| where properties !has 'privateLinkConnectionProperties'
| where properties !has 'virtualmachine'
| project id, resourceGroup, location, subscriptionId

// Orphaned Disks
// Disks no longer attached to a VM
// Click the "Run query" command above to execute the query and see results.
Resources
| where type has "microsoft.compute/disks"
| extend diskState = tostring(properties.diskState)
| where (managedBy == "" and diskState != 'ActiveSAS') or diskState == 'Unattached'
| project id, diskState, resourceGroup, location, subscriptionId, managedBy

// Orphaned NICs
// NICs no longer attached to a VM
// Click the "Run query" command above to execute the query and see results.
Resources
| where type has "microsoft.network/networkinterfaces"
| where properties !has 'virtualmachine'
| where properties !has 'privateLinkConnectionProperties'
| project properties,id, resourceGroup, location, subscriptionId


// Find WAF error logs - searching for host/uri
// Usually to find the reason the WAF blocks the request...usually sql injection
AzureDiagnostics 
| where ResourceProvider == "MICROSOFT.NETWORK" and Category == "ApplicationGatewayFirewallLog"
| where hostname_s == "tnt-identity-test.rev-log.com"
| where requestUri_s contains "RegisterConfirmation"
| order by TimeGenerated desc 

// Find AFD error logs - searching for host/uri
AzureDiagnostics 
| where ResourceProvider == "MICROSOFT.CDN" 
| where Category == "FrontDoorAccessLog"
| where hostName_s == "dev-om.rev-log.com"
| where requestUri_s contains "p3/app"
| order by TimeGenerated desc 


// Summarize requests for Key vault artifcats within last 7d
let data = AzureDiagnostics 
    | where TimeGenerated > ago(7d)
    // Ignore Authentication operations with a 401. This is normal when using Key Vault SDK, first an unauthenticated request is done then the response is used for authentication.
    | where Category == "AuditEvent" and not (OperationName == "Authentication" and httpStatusCode_d == 401)
    | where OperationName in ('CertificateIssuersList', 'CertificateList', 'ListPrivateEndpointConnections', 'SecretGet', 'VaultGet', 'VaultPatch') or '*' in ('CertificateIssuersList', 'CertificateList', 'ListPrivateEndpointConnections', 'SecretGet', 'VaultGet', 'VaultPatch')
    | where requestUri_s  == "????"
    // Create ResultStatus with all the 'success' results bucked as 'Success'
    // Certain operations like StorageAccountAutoSyncKey have no ResultSignature, for now set to 'Success' as well
    | extend ResultStatus = case (
                                ResultSignature == "",
                                "Success",
                                ResultSignature == "OK",
                                "Success",
                                ResultSignature == "Accepted",
                                "Success",
                                ResultSignature
                            )
    | where ResultStatus == 'All' or 'All' == 'All';
data
| summarize count() by identity_claim_xms_mirid_s

// Log breakdown by Solution/DataType
Usage
| where TimeGenerated > startofday(ago(90d))
| where IsBillable == true
| where Solution == "LogManagement"
| where DataType == "AzureDiagnostics"
| summarize IngestedGB = sum(Quantity) / 1000 by Type
| sort by IngestedGB desc

Usage
| where TimeGenerated > startofday(ago(90d))
| where IsBillable == true
| where Solution == "LogManagement"
| where DataType == "AzureDiagnostics"

//Compare Log Analytics Agent to AMA to ensure it is working after switch to AMA
Heartbeat
| distinct Computer, SourceComputerId, Category
| join kind=inner (
    Event
| extend d=parse_xml(EventData)
    | extend sourceHealthServiceId = tostring(d.DataItem.["@sourceHealthServiceId"])
    | project-reorder TimeGenerated, Computer, EventID, sourceHealthServiceId, ParameterXml, EventData
    ) on $left.SourceComputerId==$right.sourceHealthServiceId
| project TimeGenerated, Computer, Category, EventID, sourceHealthServiceId, ParameterXml, EventData

// Find VMs that user a specific Image
resources
| where type == "microsoft.compute/virtualmachines"
| where properties['virtualMachineProfile']['storageProfile']['imageReference']['id'] contains "2019StdImg"

// Find VMSSs that user a specific Image
resources
| where type == "microsoft.compute/virtualmachinescalesets"
| where properties['virtualMachineProfile']['storageProfile']['imageReference']['id'] contains "2019StdImg"

// AFD cache hits
AzureDiagnostics 
| where OperationName == "Microsoft.Cdn/Profiles/AccessLog/Write" and Category == "FrontDoorAccessLog" 
| where requestUri_s == "https://uat-sdrs-api.rev-log.com:443/rpo/v1.0/api-mobile/rps?since=2023-01-01"
| where cacheStatus_s == "HIT"
| summarize by cacheStatus_s

// Find Alerts using an Action Group - replace the action group resource id
resources
| where type in~ ('microsoft.insights/metricalerts','microsoft.insights/scheduledqueryrules') and ['kind'] !in~ ('LogToMetric','LogToApplicationInsights')
| extend severity = strcat("Sev", properties["severity"])
| extend enabled = tobool(properties["enabled"])
| where enabled in~ ('true')
| extend actionGroups = properties.actions.actionGroups
| project id,name,type,properties,enabled,severity,subscriptionId,actionGroups
| union (resources | where type =~ 'microsoft.alertsmanagement/smartdetectoralertrules' | extend severity = tostring(properties["severity"])
| extend enabled = properties["state"] =~ 'Enabled' | where enabled in~ ('true') | project id,name,type,properties,enabled,severity,subscriptionId), (resources | where type =~ 'microsoft.insights/activitylogalerts' | extend severity = "Sev4"
| extend enabled = tobool(properties["enabled"]) | mvexpand innerCondition = properties["condition"]["allOf"] | where innerCondition["field"] =~ 'category'
| where enabled in~ ('true') | project id,name,type,properties,enabled,severity,subscriptionId)
| extend Result=set_has_element(actionGroups, "/subscriptions/76379826-f044-401f-a14c-ceaf710d52a7/resourceGroups/fg-uks-mgmt-alertgroups/providers/microsoft.insights/actiongroups/Budget-alert")
| where Result == 1
